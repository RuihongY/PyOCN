#!/usr/bin/env python
"""
==========================================================================
pyocn
==========================================================================
Super script for simualting, generating, and testing on-chip networks.

Author: Yanghui Ou
  Date: Sep 24, 2019

"""
import argparse
import sys
import os

from pymtl3 import *

from utils import *
import utils

#-------------------------------------------------------------------------
# Global variables
#-------------------------------------------------------------------------

#=========================================================================
# Multi-level command line parser
#=========================================================================

class PyOCN:

  def __init__( self ):
    parser = argparse.ArgumentParser(
      description = 'Utility script for PyOCN',
      usage = '''./pyocn <command> [<args>]

Available commands are:
  sim  Simulate an OCN
  gen  Generate an OCN
''')

    parser.add_argument( 'command', help = 'Commands to run' )

    # Exclude all args after the first arg

    args = parser.parse_args( sys.argv[1:2] )
    getattr( self, args.command.replace( '-', '_' ) )()

  #-----------------------------------------------------------------------
  # sim
  #-----------------------------------------------------------------------

  def sim( self ):
    # TODO: list all available topologies
    p = argparse.ArgumentParser(
      description = 'Simulation',
      usage = './pyocn sim <topology> [<flags>]',
    )
    p.add_argument( 'topology' )

    topo = p.parse_args( sys.argv[2:3] ).topology

    # Argument parser specific to a network
    np = mk_net_arg_parser( topo )
    np.add_argument( '-v', '--verbose', action='store_true', help='Run in verbose mode.' )
    np.add_argument( '-s', '--trace',   action='store_true', help='Show line trace.'    )
    np.add_argument(       '--cl',      action='store_true', help='Run cycle level model instead of RTL.' )
    np.add_argument(       '--injection-rate', type=int, default=10, help='Injection rate in percentage. Default is 10.', metavar='' )
    np.add_argument(       '--pattern', type=str, default='urandom', help='Traffic pattern. Default is urandom.',  metavar='' )
    np.add_argument(       '--warmup-ncycles',  type=int, default=1000, help='Number of cycles for warmup.',  metavar='' )
    np.add_argument(       '--measure-npackets', type=int, default=200, help='Number of packets for measuring.',  metavar='' )
    np.add_argument(       '--timeout-ncycles', type=int, default=4000, help='Number of packets for measuring.',  metavar='' )
    np.add_argument(       '--sweep',      action='store_true', help='Run in sweep mode.' )
    np.add_argument(       '--sweep-step', type=int, default=10, help='Injection rate step for sweep mode.',  metavar='' )
    np.add_argument(       '--sweep-threash', type=float, default=100.0, help='Threashold for average latency in sweep mode.',  metavar='' )
    opts = np.parse_args( sys.argv[3:] )

    utils.verbose = opts.verbose

    # Simulate
    # TODO: Sweep, elapsed time

    if not opts.sweep:
      result = net_simulate( topo, opts )

      # Report stats
      print()
      result.print_result()

    else:
      net_simulate_sweep( topo, opts )

  #-----------------------------------------------------------------------
  # gen
  #-----------------------------------------------------------------------

  def gen( self ):
    ...

#-------------------------------------------------------------------------
# main
#-------------------------------------------------------------------------

if __name__ == '__main__':
  PyOCN()